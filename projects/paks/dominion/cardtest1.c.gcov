        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://adventurer
function main called 1 returned 100% blocks executed 68%
        1:    9:int main(int argc, char** argv)
        -:   10:{
        -:   11:	struct gameState state;
        1:   12:	int bonus = 0;
        1:   13:	int currentPlayer = whoseTurn(&state);
call    0 returned 100%
        1:   14:	int failedTest = 0;
        1:   15:	int arr[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:	if(argv[1])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   17:	{
    #####:   18:		initializeGame(2, arr, argv[1], &state);
call    0 never executed
        -:   19:	}
        -:   20:	else
        -:   21:	{
        1:   22:		initializeGame(2, arr, 4, &state);
call    0 returned 100%
        -:   23:	}
        1:   24:	struct gameState stateCopy = state;
        1:   25:	int currentHandCount = state.handCount[currentPlayer];
        1:   26:	printf("ADVENTURER TESTS\n\n");
call    0 returned 100%
        1:   27:	if(cardEffect(adventurer, 0, 0, 0, &state, 0, &bonus))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   28:	{
    #####:   29:		printf("FAILED CARD EFFECT\n"); //checking is adventurer is working correctly
call    0 never executed
    #####:   30:		failedTest = 1;
        -:   31:	}
        1:   32:	else printf("PASSED CARD EFFECT\n");
call    0 returned 100%
        -:   33:	
        1:   34:	if(state.handCount[currentPlayer] != (currentHandCount + 2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   35:	{
        1:   36:		failedTest = 1;
        1:   37:		printf("FAILED: HANDS DOES NOT MATCH\n");
call    0 returned 100%
        -:   38:	}
    #####:   39:	else printf("PASSED: HANDS DOES MATCH\n");
call    0 never executed
        -:   40:
        1:   41:	currentHandCount = currentHandCount + 2;
        1:   42:	printf("CARDS DRAWN WERE TREASURE: ");
call    0 returned 100%
        1:   43:	if	  (((state.hand[currentPlayer][currentHandCount-1] == copper) 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   44:		|| (state.hand[currentPlayer][currentHandCount-1] == silver)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   45:		|| (state.hand[currentPlayer][currentHandCount-1] == gold))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   46:		&&
    #####:   47:		   ((state.hand[currentPlayer][currentHandCount-2] == copper) 
branch  0 never executed
branch  1 never executed
    #####:   48:		|| (state.hand[currentPlayer][currentHandCount-2] == silver)
branch  0 never executed
branch  1 never executed
    #####:   49:		|| (state.hand[currentPlayer][currentHandCount-2] == gold)))
branch  0 never executed
branch  1 never executed
        -:   50:		{
    #####:   51:			printf("PASSED: CARDS ARE TREASURE\n");
call    0 never executed
        -:   52:		}
        -:   53:	else
        -:   54:	{
        1:   55:		printf("FAILED: CARDS ARE NOT TREASURE\n");
call    0 returned 100%
        1:   56:		failedTest = 1;
        -:   57:	}
        -:   58:	
        1:   59:	if(!failedTest)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   60:	{
    #####:   61:		printf("Adventurer PASSED ALL TESTS\n\n");
call    0 never executed
        -:   62:	}
        1:   63:	else printf("Adventurer FAIL TESTS\n\n");
call    0 returned 100%
        1:   64:	return 0;
        -:   65:}
