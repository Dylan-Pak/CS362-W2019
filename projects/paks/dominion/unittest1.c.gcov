        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://unit testing for playCard Function
function main called 1 returned 100% blocks executed 59%
        1:    9:int main(int argc, char** argv)
        -:   10:{
        -:   11:  struct gameState state;
        1:   12:  int arr[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   13:           sea_hag, tribute, smithy};
        1:   14:  if(argv[1])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   15:  {
    #####:   16:    initializeGame(2, arr, argv[1], &state);
call    0 never executed
        -:   17:  }
        -:   18:  else
        -:   19:  {
        1:   20:    initializeGame(2, arr, 4, &state);
call    0 returned 100%
        -:   21:  }
        1:   22:  int handPos = 0;
        1:   23:  int choice1 = 0;
        1:   24:  int choice2 = 0;
        1:   25:  int choice3 = 0;
        1:   26:  state.phase = 1;
        1:   27:  struct gameState stateCopy = state; //Will be making a baseline for a new game state
        1:   28:  if(playCard(handPos, choice1, choice2, choice3, &state) != -1) //Making sure the phase is right
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   29:  {
    #####:   30:    printf("Phaste State TEST FAILED\n");
call    0 never executed
    #####:   31:    return 0;
        -:   32:  }
        1:   33:  state = stateCopy;
        1:   34:  state.phase = 0;
        1:   35:  stateCopy = state;
        1:   36:  state.numActions = 0;
        1:   37:  if(playCard(handPos, choice1, choice2, choice3, &state) != -1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   38:  {
    #####:   39:    printf("Action TEST FAILED\n"); //checking for at least 1 action available
call    0 never executed
    #####:   40:    return 0;
        -:   41:  }
        1:   42:  state = stateCopy;
        1:   43:  handPos = 365;
        1:   44:  if(playCard(handPos, choice1, choice2, choice3, &state) != -1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   45:  {
    #####:   46:    printf("Hand Position TEST FAILED\n"); //checking valid hand position
call    0 never executed
    #####:   47:    return 0;
        -:   48:  }
        1:   49:  state = stateCopy;
        1:   50:  state.hand[0][0] = gardens;
        1:   51:  if(playCard(handPos, choice1, choice2, choice3, &state) != -1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   52:  {
    #####:   53:    printf("Action Card TEST FAILED\n"); //Testing if we have an action card
call    0 never executed
    #####:   54:    return 0;
        -:   55:  }
        1:   56:  state = stateCopy;
        1:   57:  handPos = 0;
        1:   58:  state.hand[0][0] = village;
        1:   59:  if(playCard(handPos, choice1, choice2, choice3, &state) != 0) //testing if one is able to play the card
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   60:  {
    #####:   61:    printf("Unable to play Action TEST FAILED\n");
call    0 never executed
    #####:   62:    return 0;
        -:   63:  }
        1:   64:  printf("playCard TEST SUCESSFULLY COMPLETED\n");
call    0 returned 100%
        1:   65:  return 0;
        -:   66:}
