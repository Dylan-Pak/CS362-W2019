        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://Unit testing for updateCoinss function
function main called 1 returned 100% blocks executed 51%
        1:    9:int main(int argc, char** argv)
        -:   10:{
        -:   11:  struct gameState state;
        1:   12:  int bonus = 0;
        1:   13:  int arr[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   14:  if(argv[1])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   15:  {
    #####:   16:    initializeGame(2, arr, argv[1], &state);
call    0 never executed
        -:   17:  }
        -:   18:  else
        -:   19:  {
        1:   20:    initializeGame(2, arr, 4, &state);
call    0 returned 100%
        -:   21:  }
        -:   22:
        1:   23:  struct gameState stateCopy = state; //Will be making a baseline for a new game state
        -:   24:  //checking is copper card registers correct amount
        1:   25:  state.handCount[0] = 1;
        1:   26:  state.hand[0][0] = copper;
        1:   27:  if(updateCoins(0, &state, bonus) != 0) 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   28:  {
    #####:   29:    printf("TEST FAILED: updateCoins failed to complete\n"); //checking if the function completes
call    0 never executed
    #####:   30:    return 0;
        -:   31:  }
        1:   32:  if(state.coins != 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   33:  {
    #####:   34:    printf("Copper TEST FAILED\n"); //checking if the hand has 1 copper
call    0 never executed
    #####:   35:    return 0;
        -:   36:  }
        -:   37:
        1:   38:  state = stateCopy;
        1:   39:  state.handCount[0] = 2;
        1:   40:  state.hand[0][0] = copper;
        1:   41:  state.hand[0][1] = silver;
        1:   42:  if(updateCoins(0, &state, bonus) != 0) 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   43:  {
    #####:   44:    printf("TEST FAILED: updateCoins failed to complete\n");
call    0 never executed
    #####:   45:    return 0;
        -:   46:  }
        1:   47:  if(state.coins != 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   48:  {
    #####:   49:    printf("Silver TEST FAILED\n"); //testing if silver registers as well as testing is multiple cards register
call    0 never executed
    #####:   50:    return 0;
        -:   51:  }
        -:   52:  
        1:   53:  state = stateCopy;
        1:   54:  state.handCount[0] = 3;
        1:   55:  state.hand[0][0] = copper;
        1:   56:  state.hand[0][1] = silver;
        1:   57:  state.hand[0][2] = gold;
        1:   58:  if(updateCoins(0, &state, bonus) != 0) 
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   59:  {
    #####:   60:    printf("TEST FAILED: updateCoins failed to complete\n");
call    0 never executed
    #####:   61:    return 0;
        -:   62:  }
        1:   63:  if(state.coins != 6) ////testing if gold registers as well as testing is multiple cards register
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   64:  {
    #####:   65:    printf("gold TEST FAILED\n");
call    0 never executed
    #####:   66:    return 0;
        -:   67:  }
        1:   68:  state = stateCopy;
        1:   69:  state.handCount[0] = 3;
        1:   70:  state.hand[0][0] = copper;
        1:   71:  state.hand[0][1] = silver;
        1:   72:  state.hand[0][2] = gold;
        1:   73:  bonus = 50;
        1:   74:  if(updateCoins(0, &state, bonus) != 0) // Checking if the bonus registers
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   75:  {
    #####:   76:    printf("TEST FAILED: updateCoins failed to complete\n");
call    0 never executed
    #####:   77:    return 0;
        -:   78:  }
        1:   79:  if(state.coins != 56)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   80:  {
    #####:   81:    printf("Bonus TEST FAILED\n");
call    0 never executed
    #####:   82:    return 0;
        -:   83:  }
        1:   84:  printf("updateCoins TEST SUCCESSFULLY COMPLETED\n");
call    0 returned 100%
        1:   85:  return 0;
        -:   86:}
