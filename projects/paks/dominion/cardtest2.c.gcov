        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://smithy
function main called 1 returned 100% blocks executed 72%
        1:    9:int main(int argc, char** argv)
        -:   10:{
        -:   11:	struct gameState state;
        1:   12:	int bonus = 0;
        1:   13:	int currentPlayer = whoseTurn(&state);
call    0 returned 100%
        1:   14:	int failedTest = 0;
        1:   15:	int arr[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:	if(argv[1])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   17:	{
    #####:   18:		initializeGame(2, arr, argv[1], &state);
call    0 never executed
        -:   19:	}
        -:   20:	else
        -:   21:	{
        1:   22:		initializeGame(2, arr, 4, &state);
call    0 returned 100%
        -:   23:	}
        1:   24:	struct gameState stateCopy = state;
        1:   25:	int currentHandCount = state.handCount[currentPlayer];
        1:   26:	state.hand[currentPlayer][0] = smithy;
        1:   27:	printf("SMITHY TESTS\n\n");
call    0 returned 100%
        1:   28:	printf("RETURN VALUE: ");
call    0 returned 100%
        1:   29:	if(cardEffect(smithy, 0, 0, 0, &state, 0, &bonus)) // checking if smithy effect completes
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   30:	{
    #####:   31:		printf("FAILED\n");
call    0 never executed
    #####:   32:		failedTest = 1;
        -:   33:	}
        1:   34:	else printf("PASSED\n");
call    0 returned 100%
        -:   35:	
        1:   36:	printf("NUMBER OF CARDS IN HAND: ");
call    0 returned 100%
        1:   37:	if(state.handCount[currentPlayer] != (currentHandCount + 2)) //checking if smithy ends with the correct number of cards in the hand
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   38:	{
        1:   39:		failedTest = 1;
        1:   40:		printf("FAILED\n");
call    0 returned 100%
        -:   41:	}
    #####:   42:	else printf("PASSED\n");
call    0 never executed
        1:   43:	currentHandCount = currentHandCount + 2;
        -:   44:	
        1:   45:	printf("SMITHY WAS DISCARDED: ");
call    0 returned 100%
        1:   46:	if(state.playedCards[state.playedCardCount-1] != smithy) // checking if smithy is discarded
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   47:	{
    #####:   48:		printf("FAILED\n");
call    0 never executed
    #####:   49:		failedTest = 1;
        -:   50:	}
        1:   51:	else printf("PASSED\n");
call    0 returned 100%
        -:   52:	
        1:   53:	if(!failedTest)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   54:	printf("Smithy Tests: ALL PASSED\n\n");
call    0 never executed
        1:   55:	else printf("Smithy Tests: FAILED\n\n");
call    0 returned 100%
        -:   56:	
        1:   57:	return 0;
        -:   58:}
