        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://council room
function main called 1 returned 100% blocks executed 68%
        1:    9:int main(int argc, char** argv){
        -:   10:	struct gameState state;
        1:   11:	int bonus = 0;
        1:   12:	int currentPlayer = whoseTurn(&state);
call    0 returned 100%
        1:   13:	int failedTest = 0;
        1:   14:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   15:           sea_hag, tribute, smithy};
        1:   16:	if(argv[1])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   17:	initializeGame(2, k, atoi(argv[1]), &state);
call    0 never executed
call    1 never executed
        1:   18:	else{initializeGame(2, k, 4, &state);}
call    0 returned 100%
        1:   19:	struct gameState stateCopy = state;
        1:   20:	int currentHandCount = state.handCount[currentPlayer];
        1:   21:	state.hand[currentPlayer][0] = council_room;
        1:   22:	state.handCount[1] = 0;
        1:   23:	printf("COUNCIL ROOM TESTS\n\n");
call    0 returned 100%
        1:   24:	printf("RETURN VALUE: ");
call    0 returned 100%
        1:   25:	if(cardEffect(council_room, 0, 0, 0, &state, 0, &bonus)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   26:		printf("FAILED\n");
call    0 never executed
    #####:   27:		failedTest = 1;
        -:   28:	}
        1:   29:	else printf("PASSED\n");
call    0 returned 100%
        -:   30:	
        1:   31:	printf("NUMBER OF CARDS IN HAND: ");
call    0 returned 100%
        1:   32:	if(state.handCount[currentPlayer] != (currentHandCount + 3)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   33:		failedTest = 1;
    #####:   34:		printf("FAILED\n");
call    0 never executed
        -:   35:	}
        1:   36:	else printf("PASSED\n");
call    0 returned 100%
        1:   37:	currentHandCount = currentHandCount + 3;
        -:   38:	
        1:   39:	printf("COUNCIL ROOM WAS DISCARDED: ");
call    0 returned 100%
        1:   40:	if(state.playedCards[state.playedCardCount-1] != council_room){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:		printf("FAILED\n");
call    0 never executed
    #####:   42:		failedTest = 1;
        -:   43:	}
        1:   44:	else printf("PASSED\n");
call    0 returned 100%
        -:   45:	
        1:   46:	printf("OTHER PLAYERS DREW A CARD: ");
call    0 returned 100%
        1:   47:	if(state.handCount[1] != 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   48:		printf("FAILED\n");
call    0 never executed
    #####:   49:		failedTest = 1;
        -:   50:	}
        1:   51:	else printf("PASSED\n");
call    0 returned 100%
        -:   52:	
        -:   53:	
        1:   54:	if(!failedTest)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   55:	printf("Council Room Tests: ALL PASSED\n\n");
call    0 returned 100%
    #####:   56:	else printf("Council Room Tests: FAILED\n\n");
call    0 never executed
        -:   57:	
        1:   58:	return 0;
        -:   59:}
