        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8://village
function main called 1 returned 100% blocks executed 73%
        1:    9:int main (int argc, char** argv) 
        -:   10:{
        -:   11:	struct gameState state;
        1:   12:	int bonus = 0;
        1:   13:	int currentPlayer = whoseTurn(&state);
call    0 returned 100%
        1:   14:	int failedTest = 0;
        1:   15:	int arr[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   16:	if(argv[1])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   17:	initializeGame(2, arr, argv[1], &state);
call    0 never executed
        1:   18:	else{initializeGame(2, arr, 4, &state);}
call    0 returned 100%
        1:   19:	struct gameState stateCopy = state;
        1:   20:	int currentHandCount = state.handCount[currentPlayer];
        1:   21:	int currentActions = state.numActions;
        -:   22:	//state.hand[currentPlayer][0] = council_room;
        1:   23:	printf("VILLAGE TESTS\n\n");
call    0 returned 100%
        -:   24:	
        1:   25:	printf("RETURN VALUE: ");
call    0 returned 100%
        1:   26:	if(cardEffect(village, 0, 0, 0, &state, 0, &bonus)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   27:		printf("FAILED\n");
call    0 never executed
    #####:   28:		failedTest = 1;
        -:   29:	}
        1:   30:	else printf("PASSED\n");
call    0 returned 100%
        -:   31:	
        -:   32:	
        1:   33:	printf("NUMBER OF CARDS IN HAND: ");
call    0 returned 100%
        1:   34:	if(state.handCount[currentPlayer] != currentHandCount){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   35:		printf("FAILED\n");
call    0 never executed
    #####:   36:		failedTest = 1;
        -:   37:	}
        1:   38:	else printf("PASSED\n");
call    0 returned 100%
        -:   39:	
        1:   40:	printf("NUMBER OF ACTIONS: ");
call    0 returned 100%
        1:   41:	if(state.numActions != currentActions+2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   42:		printf("FAILED\n");
call    0 returned 100%
        1:   43:		failedTest = 1;
        -:   44:	}
    #####:   45:	else printf("PASSED\n");
call    0 never executed
        -:   46:	
        1:   47:	if(!failedTest)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   48:	printf("Village Tests: ALL PASSED\n\n");
call    0 never executed
        1:   49:	else printf("Village Tests: FAILED\n\n");
call    0 returned 100%
        -:   50:	
        1:   51:	return 0;
        -:   52:}
